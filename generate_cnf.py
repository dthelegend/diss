import random


def generate_cnf(num_variables, num_clauses, min_literals_per_clause, max_literals_per_clause):
    cnf = []

    # Add clauses
    for _ in range(num_clauses):
        clause = []
        num_literals = random.randint(min_literals_per_clause, max_literals_per_clause)
        for _ in range(num_literals):
            variable = None
            while variable is None:
                variable = random.randint(1, num_variables)
                if variable in (abs(v) for v in clause):
                    variable = None
            # Randomly negate some literals
            if random.choice([True, False]):
                variable = -variable
            clause.append(variable)
        cnf.append(clause)

    return cnf


def print_dimacs(cnf):
    print("p cnf {} {}".format(num_variables, num_clauses))
    for clause in cnf:
        print(" ".join(map(str, clause)), "0")


if __name__ == "__main__":
    num_variables = 10  # Change this to the desired number of variables
    num_clauses = 15  # Change this to the desired number of clauses
    max_literals_per_clause = 3  # Change this to the desired maximum number of literals per clause
    min_literals_per_clause = 3  # Change this to the desired maximum number of literals per clause
    # seed = 57
    #
    # random.seed(seed)  # Set seed for reproducibility

    print("c This file was auto-generated by generate_cnf.py")
    print(f"c NUM_VARIABLES = {num_variables}")
    print(f"c NUM_CLAUSES = {num_clauses}")
    print(f"c MAX_LITERALS_PER_CLAUSE = {max_literals_per_clause}")
    print(f"c MIN_LITERALS_PER_CLAUSE = {min_literals_per_clause}")
    # print(f"c SEED = {seed}")

    cnf_instance = generate_cnf(num_variables, num_clauses, min_literals_per_clause, max_literals_per_clause)
    print_dimacs(cnf_instance)
